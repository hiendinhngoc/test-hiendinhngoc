# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: CI

on:
  push:
    branches: [ test, main ]
  pull_request:
    branches: [ test, main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: [ '2.7.1' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
        with:
          ruby-version: ${{ matrix.ruby-version }}
      - name: Cache gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-rubocop-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-rubocop-
      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Run RuboCop
        run: bundle exec rubocop --parallel
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['2.7.1']
    services:
      postgres:
        image: postgres
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
        # change this to (see https://github.com/ruby/setup-ruby#versioning):
        # uses: ruby/setup-ruby@v1
        uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Ruby gem cache
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Setup Database
        env:
          PG_DATABASE: test_hiendinhngoc_test
          PG_HOST: localhost
          PG_USER: postgres
          PG_PASSWORD: postgres
          RAILS_ENV: test
          WITH_COVERAGE: true
          DISABLE_SPRING: 1
          # RAILS_main_KEY: ${{ secrets.RAILS_main_KEY }}
        run: |
          bundle exec rails db:setup --trace
      - name: Run tests
        env:
          RAILS_ENV: test
          # RAILS_main_KEY: ${{ secrets.RAILS_main_KEY }}
        run: bundle exec rspec spec